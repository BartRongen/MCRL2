sort Cart = struct c1 | c2 | c3 | c4;
sort SwitchState = struct up | middle | down;
sort Refinery = struct r1 | r2 | r3;
sort Section = struct s1 | s2 | s3 | s4 | s5 | s6 | s7 | s8 | s9;
%Stores the location of the carts: Nat(indicates which cart) -> Nat(position).
sort LocArray = Nat -> Section;
%Stores the assigned cart to the refinery: Nat(indicates which cart) -> Cart(the cart assigned to the refinery).
sort RefMap = Nat -> Cart;
%Stores the oustanding requests: Nat(indicates which refinery) -> Bool (false = no request).
sort OustandingRequests = Nat -> Bool;
%Stores a boolean for each cart whether it is full or broken
sort IsFull = Nat -> Bool;
sort CartsBroken = Nat -> Bool;
%Stores the broken states of the refineries
sort RefBroken = Nat -> Bool;

glob refmap: RefMap;

%Maps the carts to Nat in order to use them in an array (mcrl2 doesn't allow Cart as index).
map getCart: Cart -> Nat;
eqn
	getCart(c1) = 1;
	getCart(c2) = 2;
	getCart(c3) = 3;
	getCart(c4) = 4;

%Maps the refineries to their location.
map getRefLoc: Refinery -> Section;
eqn
	getRefLoc(r1) = 4;
	getRefLoc(r2) = 6;
	getRefLoc(r3) = 8;

%Maps the refineries to Nat in order to use them in an array.
map getRef: Refinery -> Nat;
eqn
	getRef(r1) = 1;
	getRef(r2) = 2;
	getRef(r3) = 3;

map getSection: Section -> Nat;
eqn
	getSection(s1) = 1;
	getSection(s2) = 2;
	getSection(s3) = 3;
	getSection(s4) = 4;
	getSection(s5) = 5;
	getSection(s6) = 6;
	getSection(s7) = 7;
	getSection(s8) = 8;
	getSection(s9) = 9;

act
	%Requests between controller and cartcontroller
	s_request, r_request, request: Cart # Refinery;
	s_empty, r_empty, receive_load: Cart # Refinery;
	
	%Furnace unloading
	s_fill, r_fill, furnace_unload; 

	%Breaking of furnace
	r_furnace_broken, s_furnace_broken, furnace_broken, r_furnace_fixed, s_furnace_fixed, furnace_fixed;
	
	%Breaking of refinery
	r_ref_broken, s_ref_broken, refinery_broken, r_ref_fixed, s_ref_fixed, refinery_fixed: Refinery;
	s_move_to, r_move_to, move_to: Cart # Section;

	%Breaking of carts
	r_cart_broken, s_cart_broken, r_cart_fixed, s_cart_fixed, cart_fixed, cart_empty_on_spot: Cart;
	cart_broken, cart_fixed: Cart;

	%Breaking of switch
	s_switch_broken, r_switch_broken, switch_broken, r_switch_fixed, s_switch_fixed, switch_fixed;

	%Communicating refmap changes
	r_refmap_changed, s_refmap_changed, refmap_changed: Refinery # Cart;

proc
	Controller(rm: RefMap, reqs: OutstandingRequests, furBroken: Bool, refBroken: RefBroken) = 
				%Receive requests or empty carts (to finish requests)
				(sum c:Cart, r:Refinery . (rm(getRef(r)) == c) -> 
					(reqs(r) -> s_empty.Controller(rm, reqs[getRef(r)->false], furBroken, refBroken)) +
					((!reqs(r) && !refBroken(r)) -> 
						r_request(c,r).Controller(rm, reqs[getRef(r)->true], furBroken, refBroken))) +
				%Fill carts with iron
				((!furBroken) -> 
					s_fill.Controller(rm, reqs, furBroken, refBroken)) +
				%Furnace breaking and fixing
				((!furBroken) ->
					r_furnace_broken.Controller(rm, reqs, true, refBroken)) +
				(s_furnace_fixed.Controller(rm, reqs, false, refBroken)) +
				%Refinery breaking and fixing
				(sum r:Refinery . (!refBroken(getRef(r)) ->
					r_ref_broken(r).Controller(rm, reqs, furBroken, refBroken[getRef(r)->true]))) +
				(sum r:Refinery . s_ref_fixed(r) . Controller(rm, reqs, furBroken, refBroken[getRef(r)->false]));
				
	
	Repair = (sum r:Refinery . s_ref_broken(r) . r_ref_fixed(r) . Repair) + 
			 (sum c:Cart . s_cart_broken(c) . r_cart_fixed(c) . Repair) +
			 (s_furnace_broken . r_furnace_fixed . Repair) +
			 (s_switch_broken . r_switch_fixed . Repair);

	CartControl(locs:LocArray, rm:RefMap, reqs:OutstandingRequests, full:IsFull, swstate:SwitchState, swbroken:Bool, cartsbroken:CartsBroken) =
				%Cars breaking and possibly changing refinery cart mapping
				(sum c:Cart . !cartsbroken(getCart(c)) -> r_cart_broken(c) . (full(getCart(c)) -> cart_empty_on_spot(c)) . 
				(exists r:Refinery . rm(getRef(r)) == c && reqs(getRef(r))) -> 
					(exists c2:Cart . !cartsbroken(getCart(c2)) && (!exists r2:Refinery . rm(getRef(r2)) == c2)) ->
						r_refmap_changed(c2, r) . CartControl(locs, rm[getRef(r)->c2], reqs, full[getCart(c)->false], swstate, swbroken, cartsbroken[getCart(c)->true])
					<>
						CartControl(locs, rm, reqs, full[getCart(c)->false], swstate, swbroken, cartsbroken[getCart(c)->true])
				<> 
					CartControl(locs, rm, reqs, full[getCart(c)->false], swstate, swbroken, cartsbroken[getCart(c)->true])) +
				%Cart fixing
				(sum c:Cart . s_cart_fixed(c) . CartControl(locs, rm, reqs, full, swstate, swbroken, cartsbroken[getCart(c)->false])) +
				%Switch breaking and fixing
				(!swbroken -> r_switch_broken . CartControl(locs, rm, reqs, full, swstate, true, cartsbroken)) +
				(s_switch_fixed . CartControl(locs, rm, reqs, full, swstate, false, cartsbroken));
				%Cart moving

init 
	allow(
		{request, furnace_unload, receive_load, broken, repaired, move_to, section_occupied, section_free},
		comm(
			{s_request|r_request -> request, 
			 s_fill|r_fill -> furnace_unload, 
			 s_empty|r_empty -> receive_load, cartbroken|r_broken -> broken,
			 s_repair|cartfixed -> repaired},
		Carts() || ControllerS() || Repair
	));

