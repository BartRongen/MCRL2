sort Cart = struct c1 | c2 | c3 | c4;
sort Refinery = struct r1 | r2 | r3;
sort LocArray = Nat -> Nat;
sort RefArray = Nat -> Cart;
sort OustandingRequests = Nat -> Bool;
map getCart: Cart -> Nat;
eqn
	getCart(c1) = 1;
	getCart(c2) = 2;
	getCart(c3) = 3;
	getCart(c4) = 4;

map getRefLoc: Refinery -> Nat;
eqn
	getRefLoc(r1) = 4;
	getRefLoc(r2) = 6;
	getRefLoc(r3) = 8;

map getRef: Refinery -> Nat;
eqn
	getRef(r1) = 1;
	getRef(r2) = 2;
	getRef(r3) = 3;



act
	s_request, r_request, request: Cart # Refinery;
	s_empty, r_empty, receive_load: Cart # Refinery;
	s_fill, r_fill, furnace_unload;
	move_to: Cart # Nat;
	cartbroken, cartfixed: Cart;
	r_broken, s_repair: Cart;
	broken, repaired: Cart;
	section_occupied, section_free: Nat;
proc

	Cart(a: LocArray) = sum c:Cart, r:Refinery. (a(getCart(c)) == getRefLoc(r)) -> (r_request(c,r). (r==r1) -> Cart4(c, false, a, r) <>
												 (r==r2) -> Cart6(c, false, a, r) <>
												 Cart8(c, false, a, r));
	CartEmpty(c: Cart, a: LocArray, r: Refinery) = r_empty(c,r).Cart(a);
	CartFill(c: Cart, a: LocArray, r: Refinery) = r_fill.Cart1(c, true, a, r);
	Cart0(c: Cart, full: Bool, a: LocArray, r: Refinery) = full -> CartEmpty(c, a, r) <>
												move_to(c, 1).section_free(0).section_occupied(1).Cart1(c, full, a[getCart(c)->1], r);
	Cart1(c: Cart, full: Bool, a: LocArray, r: Refinery) = full -> move_to(c, 2).section_free(1).section_occupied(2).Cart2(c, full, a[getCart(c)->2], r) <>
												CartFill(c, a, r);
	Cart2(c: Cart, full: Bool, a: LocArray, r: Refinery) = full -> move_to(c, 3).section_free(2).section_occupied(3).Cart3(c, full, a[getCart(c)->3], r) <>
												move_to(c, 1).section_free(2).section_occupied(1).Cart1(c, full, a[getCart(c)->1], r);
	Cart3(c: Cart, full: Bool, a: LocArray, r: Refinery) = full -> ((r==r1) -> move_to(c, 4).section_free(3).section_occupied(4).Cart4(c, full, a[getCart(c)->4], r) <>
										  			   				(r==r2) -> move_to(c, 6).section_free(3).section_occupied(6).Cart6(c, full, a[getCart(c)->6], r) <>
										  			  			    move_to(c, 8).section_free(3).section_occupied(8).Cart8(c, full, a[getCart(c)->8], r)) <>
															move_to(c, 2).section_free(3).section_occupied(2).Cart2(c, full, a[getCart(c)->2], r);
	Cart4(c: Cart, full: Bool, a: LocArray, r: Refinery) = full -> CartEmpty(c, a, r) <>
												move_to(c, 3).section_free(4).section_occupied(3).Cart3(c, full, a[getCart(c)->3], r);
	Cart6(c: Cart, full: Bool, a: LocArray, r: Refinery) = full -> CartEmpty(c, a, r) <>
												move_to(c, 3).section_free(6).section_occupied(3).Cart3(c, full, a[getCart(c)->3], r);
	Cart8(c: Cart, full: Bool, a: LocArray, r: Refinery) = full -> CartEmpty(c, a, r) <>
												move_to(c, 3).section_free(8).section_occupied(3).Cart3(c, full, a[getCart(c)->3], r);
	Controller(reqs: OustandingRequests) = sum c:Cart, r:Refinery.(s_request(c,r).Controller(reqs[getRef(r)->true]) + s_fill + s_empty(c,r).Controller(reqs[getRef(r)->false])).Controller(reqs);
	ControllerS(reqs: OustandingRequests) = Controller(reqs[1->false][2->false][3->false]);
	Repair = sum c:Cart.r_broken(c).s_repair(c).Repair;
	Carts(a: LocArray, r: RefArray) = Cart(a[1->4][2->6][3->8][4->0]);

init 
	allow(
		{request, furnace_unload, receive_load, broken, repaired, move_to, section_occupied, section_free},
		comm(
			{s_request|r_request -> request, 
			 s_fill|r_fill -> furnace_unload, 
			 s_empty|r_empty -> receive_load, cartbroken|r_broken -> broken,
			 s_repair|cartfixed -> repaired},
		Carts() || ControllerS() || Repair
	));
