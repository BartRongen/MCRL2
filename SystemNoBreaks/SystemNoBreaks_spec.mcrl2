sort Cart = struct c1 | c2 | c3 | c4;
sort SwitchState = struct up | middle | down;
sort Refinery = struct r1 | r2 | r3;
sort Section = struct s1 | s2 | s3 | s4 | s5 | s6 | s7 | s8 | s9;
%Stores the location of the carts: Nat(indicates which cart) -> Nat(position).
sort LocArray = Nat -> Nat;
%Stores the assigned cart to the refinery: Nat(indicates which cart) -> Cart(the cart assigned to the refinery).
sort RefMap = Nat -> Cart;
%Stores the oustanding requests: Nat(indicates which refinery) -> Bool (false = no request).
sort OutstandingRequests = Nat -> Bool;
%Stores a boolean for each cart whether it is full or broken
sort IsFull = Nat -> Bool;
sort CartsBroken = Nat -> Bool;
%Stores the broken states of the refineries
sort RefBroken = Nat -> Bool;

glob refmap: RefMap;

%Maps the carts to Nat in order to use them in an array (mcrl2 doesn't allow Cart as index).
map getCart: Cart -> Nat;
eqn
	getCart(c1) = 1;
	getCart(c2) = 2;
	getCart(c3) = 3;
	getCart(c4) = 4;

%Maps the refineries to their location.
map getRefLoc: Refinery -> Nat;
eqn
	getRefLoc(r1) = 4;
	getRefLoc(r2) = 6;
	getRefLoc(r3) = 8;

%Maps a switch state to each refinery
map getRefSwitch: Refinery -> SwitchState;
eqn
	getRefSwitch(r1) = up;
	getRefSwitch(r2) = middle;
	getRefSwitch(r3) = down;

%Maps the refineries to Nat in order to use them in an array.
map getRef: Refinery -> Nat;
eqn
	getRef(r1) = 1;
	getRef(r2) = 2;
	getRef(r3) = 3;

%Maps the refineries to their respective repair platforms
map getRefRep: Refinery -> Section;
eqn
	getRefRep(r1) = s5;
	getRefRep(r2) = s7;
	getRefRep(r3) = s9;
	
map getSection: Section -> Nat;
eqn
	getSection(s1) = 1;
	getSection(s2) = 2;
	getSection(s3) = 3;
	getSection(s4) = 4;
	getSection(s5) = 5;
	getSection(s6) = 6;
	getSection(s7) = 7;
	getSection(s8) = 8;
	getSection(s9) = 9;

map getSecByNat: Nat -> Section;
eqn
	getSecByNat(1) = s1;
	getSecByNat(2) = s2;
	getSecByNat(3) = s3;
	getSecByNat(4) = s4;
	getSecByNat(5) = s5;
	getSecByNat(6) = s6;
	getSecByNat(7) = s7;
	getSecByNat(8) = s8;
	getSecByNat(9) = s9;

map getRefSec: Refinery -> Section;
eqn
	getRefSec(r1) = s4;
	getRefSec(r2) = s6;
	getRefSec(r3) = s8;

map locInit: Nat -> Nat;
eqn
	locInit(1) = 4;
	locInit(2) = 6;
	locInit(3) = 8;
	locInit(4) = 1;

map refInit: Nat -> Cart;
eqn
	refInit(1) = c1;
	refInit(2) = c2;
	refInit(3) = c3;

map reqsInit: Nat -> Bool;
eqn
	reqsInit(1) = false;
	reqsInit(2) = false;
	reqsInit(3) = false;

map fullInit: Nat -> Bool;
eqn
	fullInit(1) = false;
	fullInit(2) = false;
	fullInit(3) = false;
	fullInit(4) = false;

map cartbrokenInit: Nat -> Bool;
eqn
	cartbrokenInit(1) = false;
	cartbrokenInit(2) = false;
	cartbrokenInit(3) = false;
	cartbrokenInit(4) = false;

map refbrokenInit: Nat -> Bool;
eqn
	refbrokenInit(1) = false;
	refbrokenInit(2) = false;
	refbrokenInit(3) = false;

act
	%Requests between controller and cartcontroller
	s_request, r_request, request_load: Cart # Refinery;
	s_empty, r_empty, receive_load: Cart # Refinery;
	
	%Furnace unloading
	s_fill, r_fill, s_filled, r_filled, furnace_unload, furnace_unloaded; 

	%Breaking of furnace
	r_furnace_broken, s_furnace_broken, furnace_broken, r_furnace_fixed, s_furnace_fixed, furnace_fixed;
	
	%Breaking of refinery
	r_ref_broken, s_ref_broken, refinery_broken, r_ref_fixed, s_ref_fixed, refinery_fixed: Refinery;

	%Moving carts
	s_move_to, r_move_to, cart_move: Cart # Section;

	%Breaking of carts
	r_cart_broken, s_cart_broken, cart_broken, r_cart_fixed, s_cart_fixed, cart_fixed, cart_empty_on_spot, r_cart_fixed_on_spot, s_cart_fixed_on_spot, cart_fixed_on_spot: Cart;

	%Breaking of switch
	s_switch_broken, r_switch_broken, switch_broken, r_switch_fixed, s_switch_fixed, switch_fixed;

	%Switch changes
	switch_changed: SwitchState;

	%Section occupied or free
	section_occupied, section_free: Section;

	%Communicating refmap changes
	r_refmap_changed, s_refmap_changed, cart_reassigned: Refinery # Cart;

proc
	IronController(rm: RefMap, reqs: OutstandingRequests, furBroken: Bool, refBroken: RefBroken, furFilling: Bool) = 
				%Receive requests or empty carts (to finish requests)
				(sum c:Cart, r:Refinery . (rm(getRef(r)) == c) -> 
					(reqs(getRef(r)) -> s_empty(c,r).IronController(rm, reqs[getRef(r)->false], furBroken, refBroken, furFilling))) +
				(sum c:Cart, r:Refinery . ((rm(getRef(r)) == c) && !reqs(getRef(r)) && !refBroken(getRef(r))) -> 
						r_request(c,r).IronController(rm, reqs[getRef(r)->true], furBroken, refBroken, furFilling)) +
				%Fill carts with iron
				((!furBroken && !furFilling) -> 
					s_fill . IronController(rm, reqs, furBroken, refBroken, true)) +
				((!furBroken && furFilling) -> 
					r_filled . IronController(rm, reqs, furBroken, refBroken, false)) +
				%Refmap changes
				(sum c:Cart, r:Refinery . s_refmap_changed(r,c) . IronController(rm[getRef(r) -> c], reqs, furBroken, refBroken, furFilling)) +
				%Cart moving
				(sum c:Cart, s:Section . s_move_to(c, s) . IronController(rm, reqs, furBroken, refBroken, furFilling));

	CartControl(locs:LocArray, rm:RefMap, reqs:OutstandingRequests, full:IsFull, swstate:SwitchState, swbroken:Bool, cartsbroken:CartsBroken, backup:Bool, backupcart:Cart) =

				%Request acceptance
				(sum c:Cart, r:Refinery . s_request(c, r) . CartControl(locs, rm, reqs[getRef(r)->true], full, swstate, swbroken, cartsbroken, backup, backupcart)) +
				
				%Car movement
				(sum c:Cart, r:Refinery . ( reqs(getRef(r)) && (rm(getRef(r)) == c) && !cartsbroken(getCart(c))) ->
					( full(getCart(c)) ->
						( (locs(getCart(c)) == getRefLoc(r)) ->
							( r_empty(c, r) . 
								( (getSection(getRefRep(r)) == locs(getCart(backupcart))) -> 
									(r_refmap_changed(r, backupcart) . CartControl(locs, rm[getRef(r)->backupcart], reqs[getRef(r)->false], full[getCart(c)->false], swstate, swbroken, cartsbroken, false, c))
								<>
									CartControl(locs, rm, reqs[getRef(r)->false], full[getCart(c)->false], swstate, swbroken, cartsbroken, backup, backupcart)
								)
							)
						<>
							( (locs(getCart(c)) == 2) -> 
								( ((swstate != getRefSwitch(r)) && !swbroken) -> 
									switch_changed(getRefSwitch(r)) . CartControl(locs, rm, reqs, full, getRefSwitch(r), swbroken, cartsbroken, backup, backupcart) 
								<> 
									( (!(exists d:Cart . locs(getCart(d)) == 3) && !swbroken) ->
										r_move_to(c, s3) . section_occupied(s3) . section_free(s2) . CartControl(locs[getCart(c)->3], rm, reqs, full, swstate, swbroken, cartsbroken, backup, backupcart)
									)
								)
							<>
								( ((locs(getCart(c)) == 3) && !swbroken) ->
									( !(exists d:Cart . locs(getCart(d)) == getRefLoc(r)) ->
										r_move_to(c, getRefSec(r)) . section_occupied(getSecByNat(getRefLoc(r))) . section_free(s3) . CartControl(locs[getCart(c)->getRefLoc(r)], rm, reqs, full, swstate, swbroken, cartsbroken, backup, backupcart)
									)
								)
							) 
						) 
					<>
						( (locs(getCart(c)) == getRefLoc(r)) ->
							( (!swbroken && (!exists d:Cart . locs(getCart(d)) == 3 || locs(getCart(d)) == 2)) ->
								( (swstate != getRefSwitch(r)) -> 
									switch_changed(getRefSwitch(r)) . r_move_to(c, s3) . section_occupied(s3) . section_free(getSecByNat(getRefLoc(r))) . CartControl(locs[getCart(c)->3], rm, reqs, full, getRefSwitch(r), swbroken, cartsbroken, backup, backupcart) 
								<>
									r_move_to(c, s3) . section_occupied(s3) . section_free(getSecByNat(getRefLoc(r))) . CartControl(locs[getCart(c)->3], rm, reqs, full, swstate, swbroken, cartsbroken, backup, backupcart)
								)
							)
						<>
							( (locs(getCart(c)) == 3) -> 
								( (!(exists d:Cart . locs(getCart(d)) == 2) && !swbroken) ->
									r_move_to(c, s2) . section_occupied(s2) . section_free(s3) . CartControl(locs[getCart(c)->2], rm, reqs, full, swstate, swbroken, cartsbroken, backup, backupcart)
								)
							<>
								( (locs(getCart(c)) == 2) ->
									(r_fill . CartControl(locs, rm, reqs, full, swstate, swbroken, cartsbroken, backup, backupcart) +
									s_filled . CartControl(locs, rm, reqs, full[getCart(c)->true], swstate, swbroken, cartsbroken, backup, backupcart))
								<>
									( (locs(getCart(c)) == 1) ->
										( (!(exists d:Cart . locs(getCart(d)) == 2 || locs(getCart(d)) == 3)) ->
											r_move_to(c, s2) . section_occupied(s2) . section_free(s1) . CartControl(locs[getCart(c)->2], rm, reqs, full, swstate, swbroken, cartsbroken, backup, backupcart)
										)
									<>
										( (locs(getCart(c)) == getSection(getRefRep(r))) ->
											( !(exists d:Cart . locs(getCart(d)) == getRefLoc(r)) && !backup) ->
												r_move_to(c, getRefSec(r)) . section_occupied(getRefSec(r)) . section_free(getRefRep(r)) . CartControl(locs[getCart(c)->getRefLoc(r)], rm, reqs, full, swstate, swbroken, cartsbroken, backup, backupcart)
											)
									)
								)
							)
						)
					)
				);

init 
	allow(
		{request_load, receive_load, furnace_unload, furnace_broken, furnace_fixed, refinery_broken, refinery_fixed, cart_broken, cart_fixed, cart_empty_on_spot, switch_broken, switch_fixed, cart_reassigned, switch_changed, cart_move, section_free, section_occupied, cart_fixed_on_spot, furnace_unloaded},
		comm(
			{r_request|s_request -> request_load,
			 r_empty|s_empty -> receive_load,
			 r_fill|s_fill -> furnace_unload,
			 r_filled|s_filled -> furnace_unloaded,
			 r_furnace_broken|s_furnace_broken -> furnace_broken,
			 r_furnace_fixed|s_furnace_fixed -> furnace_fixed,
			 r_ref_broken|s_ref_broken -> refinery_broken,
			 r_ref_fixed|s_ref_fixed -> refinery_fixed,
			 r_move_to|s_move_to -> cart_move,
			 r_cart_broken|s_cart_broken -> cart_broken,
			 r_cart_fixed|s_cart_fixed -> cart_fixed,
			 r_cart_fixed_on_spot|s_cart_fixed_on_spot -> cart_fixed_on_spot,
			 r_switch_broken|s_switch_broken -> switch_broken,
			 r_switch_fixed|s_switch_fixed -> switch_fixed,
			 r_refmap_changed|s_refmap_changed -> cart_reassigned},
		CartControl(locInit, refInit, reqsInit, fullInit, middle, false, cartbrokenInit, false, c4) || IronController(refInit, reqsInit, false, refbrokenInit, false)
	));

